import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Pattern;

class Solution {

	@SuppressWarnings("resource")
	public static void main(String args[]) {
		Scanner in = new Scanner(System.in);
		int N = in.nextInt();
		if (in.hasNextLine()) {
			in.nextLine();
		}

		ArrayList<String> invalidISBN = new ArrayList<String>(); 	// Stockage de l'ISBN dans une liste de type String

		for (int i = 0; i < N; i++) {
			String ISBN = in.nextLine();

			if (!isValidISBN(ISBN)) 								// Appel de methode pour vérifier la non-validité de l'ISBN
			{
				invalidISBN.add(ISBN); 								// Ajout des ISBN invalides dans la liste
			}
		}

		System.out.println(invalidISBN.size() + " invalid:"); 		// Affichages attendus
		System.out.println(String.join("\n", invalidISBN));

	}

	// Première étape : vérification de longeur de l'ISBN (10 ou 13)
	private static boolean isValidISBN(String isbn) {

		if (isbn.length() == 10) { 									// Test de longueur 10
			return isValidISBN10(isbn); 							// Si oui, appel de la methode correspondante
		} else if (isbn.length() == 13) { 							// Test de longueur 13
			return isValidISBN13(isbn);
		} 															// Si true, appel de la methode correspondante

		return false; 												// Sinon false (!isValidISBN)
	}

	// Deuxième étape : ISBN10 -> Vérification du contenu de la String
    private static boolean isValidISBN10(String isbn)
    {
        
        if (!Pattern.matches("^\\d{9}(\\d|X)$", isbn)) 				//Regex Pattern : 9décimales, suivies d'une décimale ou d'un X ($ = fin de chaîne)
        {
            return false;											// (!isValideISBN)
        }

        //Troisième étape : ISBN10 -> Calculs
        int Sum = 0;

        for (int i = 0; i < isbn.length() - 1; i++)
        {
        	int currentDigit = isbn.charAt(i) - '0';				//Digit en cours égal à sa valeur numérique - 0
            Sum += (currentDigit * (10 - i));						//Somme des digits * position index dans l'ordre inverse
        }
        int lastDigit = isbn.charAt(isbn.length() - 1);
        Sum += ((lastDigit == 'X') ? 10 : (lastDigit - '0'));		//Si dernier digit = X, ajouter 10, sinon ajouter sa valeur - 0
        
        //Si multiple de 11
        if (Sum % 11 == 0 ) {
			return true;
		} 

        return Sum % 11 == 0;										//Sinon (!isValideISBN)
    }

 // Deuxième étape : ISBN13 -> Vérification du contenu de la String
    private static boolean isValidISBN13(String isbn)
    {
        
        if (!Pattern.matches("^\\d{13}$", isbn))				    //Regex Pattern : 13décimales
        {
            return false;											// (!isValideISBN)
        }

      //Troisième étape : ISBN13 -> Calculs
        int Sum = 0;
        boolean oddIndex = true;                                    //Boolean index pair
        
        for (int i = 0; i < 12; i++)
        {
        	int currentDigit = isbn.charAt(i) - '0';				//Digit en cours égal à sa valeur numérique - 0
			Sum += (currentDigit * (oddIndex ? 1 : 3));			    //Somme des digits * 1 ou 3 par alternance
			oddIndex = !oddIndex;									//Change de valeur à chaque tour de boucle
        }
        
        int checkDigit = (10 - (Sum % 10)) % 10;					//calcul (CHIANT) du digit de contrôle qui devrait être à la fin
        
      //calcul du digit fourni en dernière position : si = X alors égal 10, sinon conserve sa valeur
        int givenCheckDigit = (isbn.charAt(12) == 'X' ? 10 : isbn.charAt(12) - '0');	

      //comparaison du digit fourni et du digit attendu (boolean)
        return givenCheckDigit == checkDigit;
    }
}
